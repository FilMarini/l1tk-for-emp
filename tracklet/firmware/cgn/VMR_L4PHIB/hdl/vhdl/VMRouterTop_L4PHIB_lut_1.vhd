-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity VMRouterTop_L4PHIB_lut_1_rom is 
    generic(
             DWIDTH     : integer := 6; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 2048
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of VMRouterTop_L4PHIB_lut_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 11=> "000000", 12 to 15=> "000001", 16 to 24=> "000000", 25 to 29=> "000001", 30 to 31=> "000010", 
    32 to 38=> "000000", 39 to 43=> "000001", 44 to 47=> "000010", 48 to 51=> "000000", 52 to 56=> "000001", 
    57 to 61=> "000010", 62 to 63=> "000011", 64 to 65=> "000000", 66 to 70=> "000001", 71 to 75=> "000010", 
    76 to 79=> "000011", 80 to 83=> "000001", 84 to 88=> "000010", 89 to 94=> "000011", 95 => "000100", 
    96 to 97=> "000001", 98 to 102=> "000010", 103 to 107=> "000011", 108 to 111=> "000100", 112 to 115=> "000010", 
    116 to 120=> "000011", 121 to 126=> "000100", 127 => "000101", 128 to 129=> "000010", 130 to 134=> "000011", 
    135 to 139=> "000100", 140 to 143=> "000101", 144 to 147=> "000011", 148 to 152=> "000100", 153 to 158=> "000101", 
    159 => "000110", 160 => "000011", 161 to 166=> "000100", 167 to 171=> "000101", 172 to 175=> "000110", 
    176 to 179=> "000100", 180 to 184=> "000101", 185 to 190=> "000110", 191 => "000111", 192 => "000100", 
    193 to 198=> "000101", 199 to 203=> "000110", 204 to 207=> "000111", 208 to 211=> "000101", 212 to 216=> "000110", 
    217 to 223=> "000111", 224 => "000101", 225 to 230=> "000110", 231 to 236=> "000111", 237 to 239=> "001000", 
    240 to 243=> "000110", 244 to 249=> "000111", 250 to 255=> "001000", 256 => "000110", 257 to 261=> "000111", 
    262 to 268=> "001000", 269 to 271=> "001001", 272 to 274=> "000111", 275 to 281=> "001000", 282 to 287=> "001001", 
    288 to 293=> "001000", 294 to 300=> "001001", 301 to 303=> "001010", 304 to 306=> "001000", 307 to 313=> "001001", 
    314 to 319=> "001010", 320 to 325=> "001001", 326 to 332=> "001010", 333 to 335=> "001011", 336 to 338=> "001001", 
    339 to 345=> "001010", 346 to 351=> "001011", 352 to 357=> "001010", 358 to 365=> "001011", 366 to 367=> "001100", 
    368 to 370=> "001010", 371 to 377=> "001011", 378 to 383=> "001100", 384 to 389=> "001011", 390 to 397=> "001100", 
    398 to 399=> "001101", 400 to 401=> "001011", 402 to 409=> "001100", 410 to 415=> "001101", 416 to 421=> "001100", 
    422 to 429=> "001101", 430 to 431=> "001110", 432 to 433=> "001100", 434 to 441=> "001101", 442 to 447=> "001110", 
    448 to 453=> "001101", 454 to 461=> "001110", 462 to 463=> "001111", 464 to 465=> "001101", 466 to 473=> "001110", 
    474 to 479=> "001111", 480 to 485=> "001110", 486 to 494=> "001111", 495 => "010000", 496 to 497=> "001110", 
    498 to 505=> "001111", 506 to 511=> "010000", 512 to 517=> "001111", 518 to 526=> "010000", 527 => "010001", 
    528 => "001111", 529 to 537=> "010000", 538 to 543=> "010001", 544 to 549=> "010000", 550 to 559=> "010001", 
    560 => "010000", 561 to 570=> "010001", 571 to 575=> "010010", 576 to 580=> "010001", 581 to 602=> "010010", 
    603 to 607=> "010011", 608 to 612=> "010010", 613 to 634=> "010011", 635 to 639=> "010100", 640 to 644=> "010011", 
    645 to 666=> "010100", 667 to 671=> "010101", 672 to 676=> "010100", 677 to 699=> "010101", 700 to 703=> "010110", 
    704 to 707=> "010101", 708 to 731=> "010110", 732 to 735=> "010111", 736 to 739=> "010110", 740 to 764=> "010111", 
    765 to 767=> "011000", 768 to 770=> "010111", 771 to 796=> "011000", 797 to 799=> "011001", 800 to 802=> "011000", 
    803 to 829=> "011001", 830 to 831=> "011010", 832 to 833=> "011001", 834 to 862=> "011010", 863 => "011011", 
    864 => "011010", 865 to 895=> "011011", 896 to 927=> "011100", 928 to 959=> "011101", 960 to 991=> "011110", 
    992 to 1023=> "011111", 1024 to 1055=> "100000", 1056 to 1087=> "100001", 1088 to 1119=> "100010", 1120 to 1151=> "100011", 
    1152 to 1167=> "100100", 1168 => "100101", 1169 to 1183=> "100100", 1184 to 1198=> "100101", 1199 => "100100", 
    1200 to 1201=> "100110", 1202 to 1215=> "100101", 1216 to 1229=> "100110", 1230 to 1231=> "100101", 1232 to 1234=> "100111", 
    1235 to 1247=> "100110", 1248 to 1260=> "100111", 1261 to 1263=> "100110", 1264 to 1266=> "101000", 1267 to 1279=> "100111", 
    1280 to 1292=> "101000", 1293 to 1295=> "100111", 1296 to 1299=> "101001", 1300 to 1311=> "101000", 1312 to 1323=> "101001", 
    1324 to 1327=> "101000", 1328 to 1331=> "101010", 1332 to 1343=> "101001", 1344 to 1355=> "101010", 1356 to 1359=> "101001", 
    1360 to 1364=> "101011", 1365 to 1375=> "101010", 1376 to 1386=> "101011", 1387 to 1391=> "101010", 1392 to 1396=> "101100", 
    1397 to 1407=> "101011", 1408 to 1418=> "101100", 1419 to 1423=> "101011", 1424 to 1428=> "101101", 1429 to 1439=> "101100", 
    1440 to 1450=> "101101", 1451 to 1455=> "101100", 1456 to 1460=> "101110", 1461 to 1471=> "101101", 1472 => "101111", 
    1473 to 1482=> "101110", 1483 to 1487=> "101101", 1488 to 1493=> "101111", 1494 to 1503=> "101110", 1504 => "110000", 
    1505 to 1513=> "101111", 1514 to 1519=> "101110", 1520 to 1525=> "110000", 1526 to 1534=> "101111", 1535 => "101110", 
    1536 to 1537=> "110001", 1538 to 1545=> "110000", 1546 to 1551=> "101111", 1552 to 1557=> "110001", 1558 to 1566=> "110000", 
    1567 => "101111", 1568 to 1569=> "110010", 1570 to 1577=> "110001", 1578 to 1583=> "110000", 1584 to 1589=> "110010", 
    1590 to 1597=> "110001", 1598 to 1599=> "110000", 1600 to 1601=> "110011", 1602 to 1609=> "110010", 1610 to 1615=> "110001", 
    1616 to 1621=> "110011", 1622 to 1629=> "110010", 1630 to 1631=> "110001", 1632 to 1633=> "110100", 1634 to 1641=> "110011", 
    1642 to 1647=> "110010", 1648 to 1653=> "110100", 1654 to 1661=> "110011", 1662 to 1663=> "110010", 1664 to 1666=> "110101", 
    1667 to 1673=> "110100", 1674 to 1679=> "110011", 1680 to 1685=> "110101", 1686 to 1693=> "110100", 1694 to 1695=> "110011", 
    1696 to 1698=> "110110", 1699 to 1705=> "110101", 1706 to 1711=> "110100", 1712 to 1717=> "110110", 1718 to 1724=> "110101", 
    1725 to 1727=> "110100", 1728 to 1730=> "110111", 1731 to 1737=> "110110", 1738 to 1743=> "110101", 1744 to 1749=> "110111", 
    1750 to 1756=> "110110", 1757 to 1759=> "110101", 1760 to 1762=> "111000", 1763 to 1769=> "110111", 1770 to 1775=> "110110", 
    1776 => "111001", 1777 to 1781=> "111000", 1782 to 1788=> "110111", 1789 to 1791=> "110110", 1792 to 1795=> "111001", 
    1796 to 1801=> "111000", 1802 to 1807=> "110111", 1808 => "111010", 1809 to 1814=> "111001", 1815 to 1820=> "111000", 
    1821 to 1823=> "110111", 1824 to 1827=> "111010", 1828 to 1832=> "111001", 1833 to 1839=> "111000", 1840 => "111011", 
    1841 to 1846=> "111010", 1847 to 1851=> "111001", 1852 to 1855=> "111000", 1856 to 1859=> "111011", 1860 to 1864=> "111010", 
    1865 to 1870=> "111001", 1871 => "111000", 1872 => "111100", 1873 to 1878=> "111011", 1879 to 1883=> "111010", 
    1884 to 1887=> "111001", 1888 to 1891=> "111100", 1892 to 1896=> "111011", 1897 to 1902=> "111010", 1903 => "111001", 
    1904 to 1905=> "111101", 1906 to 1910=> "111100", 1911 to 1915=> "111011", 1916 to 1919=> "111010", 1920 to 1923=> "111101", 
    1924 to 1928=> "111100", 1929 to 1934=> "111011", 1935 => "111010", 1936 to 1937=> "111110", 1938 to 1942=> "111101", 
    1943 to 1947=> "111100", 1948 to 1951=> "111011", 1952 to 1955=> "111110", 1956 to 1960=> "111101", 1961 to 1966=> "111100", 
    1967 => "111011", 1968 to 1969=> "111111", 1970 to 1974=> "111110", 1975 to 1979=> "111101", 1980 to 1983=> "111100", 
    1984 to 1987=> "111111", 1988 to 1992=> "111110", 1993 to 1997=> "111101", 1998 to 1999=> "111100", 2000 to 2006=> "111111", 
    2007 to 2011=> "111110", 2012 to 2015=> "111101", 2016 to 2024=> "111111", 2025 to 2029=> "111110", 2030 to 2031=> "111101", 
    2032 to 2043=> "111111", 2044 to 2047=> "111110" );


signal q0_t0 : std_logic_vector(DWIDTH-1 downto 0);
signal q0_t1 : std_logic_vector(DWIDTH-1 downto 0);
signal q1_t0 : std_logic_vector(DWIDTH-1 downto 0);
signal q1_t1 : std_logic_vector(DWIDTH-1 downto 0);
begin 

q0 <= q0_t1;
q1 <= q1_t1;

p_IO_pipeline_reg : process (clk)  
begin
    if (clk'event and clk = '1') then
      if (ce0 = '1') then 
        q0_t1 <= q0_t0;
      end if;
      if (ce1 = '1') then 
        q1_t1 <= q1_t0;
      end if;
    end if;
end process;

memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0_t0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1_t0 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity VMRouterTop_L4PHIB_lut_1 is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 2048;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of VMRouterTop_L4PHIB_lut_1 is
    component VMRouterTop_L4PHIB_lut_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    VMRouterTop_L4PHIB_lut_1_rom_U :  component VMRouterTop_L4PHIB_lut_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


