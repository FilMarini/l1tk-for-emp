-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity VMRouterTop_L3PHIB_lut_1_rom is 
    generic(
             DWIDTH     : integer := 6; 
             AWIDTH     : integer := 11; 
             MEM_SIZE    : integer := 2048
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of VMRouterTop_L3PHIB_lut_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 10=> "000000", 11 to 14=> "000001", 15 => "000010", 16 to 24=> "000000", 25 to 28=> "000001", 
    29 to 31=> "000010", 32 to 38=> "000000", 39 to 42=> "000001", 43 to 46=> "000010", 47 => "000011", 
    48 to 52=> "000000", 53 to 56=> "000001", 57 to 60=> "000010", 61 to 63=> "000011", 64 to 67=> "000000", 
    68 to 70=> "000001", 71 to 74=> "000010", 75 to 78=> "000011", 79 => "000100", 80 to 81=> "000000", 
    82 to 84=> "000001", 85 to 88=> "000010", 89 to 92=> "000011", 93 to 95=> "000100", 96 to 98=> "000001", 
    99 to 102=> "000010", 103 to 106=> "000011", 107 to 110=> "000100", 111 => "000101", 112 => "000001", 
    113 to 116=> "000010", 117 to 120=> "000011", 121 to 124=> "000100", 125 to 127=> "000101", 128 to 130=> "000010", 
    131 to 134=> "000011", 135 to 138=> "000100", 139 to 143=> "000101", 144 => "000010", 145 to 148=> "000011", 
    149 to 152=> "000100", 153 to 156=> "000101", 157 to 159=> "000110", 160 to 162=> "000011", 163 to 166=> "000100", 
    167 to 170=> "000101", 171 to 175=> "000110", 176 => "000011", 177 to 180=> "000100", 181 to 184=> "000101", 
    185 to 189=> "000110", 190 to 191=> "000111", 192 to 194=> "000100", 195 to 198=> "000101", 199 to 202=> "000110", 
    203 to 207=> "000111", 208 => "000100", 209 to 212=> "000101", 213 to 216=> "000110", 217 to 221=> "000111", 
    222 to 223=> "001000", 224 to 226=> "000101", 227 to 230=> "000110", 231 to 234=> "000111", 235 to 239=> "001000", 
    240 to 244=> "000110", 245 to 248=> "000111", 249 to 253=> "001000", 254 to 255=> "001001", 256 to 257=> "000110", 
    258 to 262=> "000111", 263 to 267=> "001000", 268 to 271=> "001001", 272 to 276=> "000111", 277 to 280=> "001000", 
    281 to 285=> "001001", 286 to 287=> "001010", 288 to 289=> "000111", 290 to 294=> "001000", 295 to 299=> "001001", 
    300 to 303=> "001010", 304 to 307=> "001000", 308 to 312=> "001001", 313 to 318=> "001010", 319 => "001011", 
    320 to 321=> "001000", 322 to 326=> "001001", 327 to 331=> "001010", 332 to 335=> "001011", 336 to 339=> "001001", 
    340 to 344=> "001010", 345 to 350=> "001011", 351 => "001100", 352 to 353=> "001001", 354 to 358=> "001010", 
    359 to 363=> "001011", 364 to 367=> "001100", 368 to 371=> "001010", 372 to 376=> "001011", 377 to 382=> "001100", 
    383 => "001101", 384 => "001010", 385 to 390=> "001011", 391 to 395=> "001100", 396 to 399=> "001101", 
    400 to 403=> "001011", 404 to 408=> "001100", 409 to 415=> "001101", 416 => "001011", 417 to 422=> "001100", 
    423 to 428=> "001101", 429 to 431=> "001110", 432 to 435=> "001100", 436 to 441=> "001101", 442 to 447=> "001110", 
    448 => "001100", 449 to 453=> "001101", 454 to 460=> "001110", 461 to 463=> "001111", 464 to 466=> "001101", 
    467 to 473=> "001110", 474 to 479=> "001111", 480 to 485=> "001110", 486 to 492=> "001111", 493 to 495=> "010000", 
    496 to 498=> "001110", 499 to 505=> "001111", 506 to 511=> "010000", 512 to 517=> "001111", 518 to 525=> "010000", 
    526 to 527=> "010001", 528 to 530=> "001111", 531 to 537=> "010000", 538 to 543=> "010001", 544 to 549=> "010000", 
    550 to 557=> "010001", 558 to 559=> "010010", 560 to 561=> "010000", 562 to 569=> "010001", 570 to 575=> "010010", 
    576 to 581=> "010001", 582 to 589=> "010010", 590 to 591=> "010011", 592 to 593=> "010001", 594 to 601=> "010010", 
    602 to 607=> "010011", 608 to 613=> "010010", 614 to 622=> "010011", 623 => "010100", 624 to 625=> "010010", 
    626 to 633=> "010011", 634 to 639=> "010100", 640 to 645=> "010011", 646 to 655=> "010100", 656 => "010011", 
    657 to 666=> "010100", 667 to 671=> "010101", 672 to 676=> "010100", 677 to 698=> "010101", 699 to 703=> "010110", 
    704 to 708=> "010101", 709 to 730=> "010110", 731 to 735=> "010111", 736 to 740=> "010110", 741 to 762=> "010111", 
    763 to 767=> "011000", 768 to 772=> "010111", 773 to 795=> "011000", 796 to 799=> "011001", 800 to 803=> "011000", 
    804 to 828=> "011001", 829 to 831=> "011010", 832 to 834=> "011001", 835 to 861=> "011010", 862 to 863=> "011011", 
    864 to 865=> "011010", 866 to 894=> "011011", 895 => "011100", 896 => "011011", 897 to 927=> "011100", 
    928 to 959=> "011101", 960 to 991=> "011110", 992 to 1023=> "011111", 1024 to 1055=> "100000", 1056 to 1087=> "100001", 
    1088 to 1119=> "100010", 1120 to 1135=> "100011", 1136 => "100100", 1137 to 1151=> "100011", 1152 to 1166=> "100100", 
    1167 => "100011", 1168 to 1169=> "100101", 1170 to 1183=> "100100", 1184 to 1197=> "100101", 1198 to 1199=> "100100", 
    1200 to 1202=> "100110", 1203 to 1215=> "100101", 1216 to 1228=> "100110", 1229 to 1231=> "100101", 1232 to 1235=> "100111", 
    1236 to 1247=> "100110", 1248 to 1259=> "100111", 1260 to 1263=> "100110", 1264 to 1268=> "101000", 1269 to 1279=> "100111", 
    1280 to 1290=> "101000", 1291 to 1295=> "100111", 1296 to 1300=> "101001", 1301 to 1311=> "101000", 1312 to 1322=> "101001", 
    1323 to 1327=> "101000", 1328 to 1332=> "101010", 1333 to 1343=> "101001", 1344 to 1354=> "101010", 1355 to 1359=> "101001", 
    1360 to 1364=> "101011", 1365 to 1375=> "101010", 1376 => "101100", 1377 to 1386=> "101011", 1387 to 1391=> "101010", 
    1392 to 1397=> "101100", 1398 to 1407=> "101011", 1408 to 1409=> "101101", 1410 to 1417=> "101100", 1418 to 1423=> "101011", 
    1424 to 1429=> "101101", 1430 to 1438=> "101100", 1439 => "101011", 1440 to 1441=> "101110", 1442 to 1449=> "101101", 
    1450 to 1455=> "101100", 1456 to 1461=> "101110", 1462 to 1469=> "101101", 1470 to 1471=> "101100", 1472 to 1473=> "101111", 
    1474 to 1481=> "101110", 1482 to 1487=> "101101", 1488 to 1493=> "101111", 1494 to 1501=> "101110", 1502 to 1503=> "101101", 
    1504 to 1506=> "110000", 1507 to 1513=> "101111", 1514 to 1519=> "101110", 1520 to 1525=> "110000", 1526 to 1533=> "101111", 
    1534 to 1535=> "101110", 1536 to 1538=> "110001", 1539 to 1545=> "110000", 1546 to 1551=> "101111", 1552 to 1557=> "110001", 
    1558 to 1564=> "110000", 1565 to 1567=> "101111", 1568 to 1570=> "110010", 1571 to 1577=> "110001", 1578 to 1583=> "110000", 
    1584 => "110011", 1585 to 1589=> "110010", 1590 to 1596=> "110001", 1597 to 1599=> "110000", 1600 to 1603=> "110011", 
    1604 to 1609=> "110010", 1610 to 1615=> "110001", 1616 => "110100", 1617 to 1622=> "110011", 1623 to 1628=> "110010", 
    1629 to 1631=> "110001", 1632 to 1635=> "110100", 1636 to 1640=> "110011", 1641 to 1647=> "110010", 1648 => "110101", 
    1649 to 1654=> "110100", 1655 to 1659=> "110011", 1660 to 1663=> "110010", 1664 to 1667=> "110101", 1668 to 1672=> "110100", 
    1673 to 1678=> "110011", 1679 => "110010", 1680 to 1681=> "110110", 1682 to 1686=> "110101", 1687 to 1691=> "110100", 
    1692 to 1695=> "110011", 1696 to 1699=> "110110", 1700 to 1704=> "110101", 1705 to 1710=> "110100", 1711 => "110011", 
    1712 to 1713=> "110111", 1714 to 1718=> "110110", 1719 to 1723=> "110101", 1724 to 1727=> "110100", 1728 to 1731=> "110111", 
    1732 to 1736=> "110110", 1737 to 1742=> "110101", 1743 => "110100", 1744 to 1745=> "111000", 1746 to 1750=> "110111", 
    1751 to 1755=> "110110", 1756 to 1759=> "110101", 1760 to 1764=> "111000", 1765 to 1768=> "110111", 1769 to 1773=> "110110", 
    1774 to 1775=> "110101", 1776 to 1777=> "111001", 1778 to 1782=> "111000", 1783 to 1787=> "110111", 1788 to 1791=> "110110", 
    1792 to 1796=> "111001", 1797 to 1800=> "111000", 1801 to 1805=> "110111", 1806 to 1807=> "110110", 1808 to 1810=> "111010", 
    1811 to 1814=> "111001", 1815 to 1818=> "111000", 1819 to 1823=> "110111", 1824 => "111011", 1825 to 1828=> "111010", 
    1829 to 1832=> "111001", 1833 to 1837=> "111000", 1838 to 1839=> "110111", 1840 to 1842=> "111011", 1843 to 1846=> "111010", 
    1847 to 1850=> "111001", 1851 to 1855=> "111000", 1856 => "111100", 1857 to 1860=> "111011", 1861 to 1864=> "111010", 
    1865 to 1869=> "111001", 1870 to 1871=> "111000", 1872 to 1874=> "111100", 1875 to 1878=> "111011", 1879 to 1882=> "111010", 
    1883 to 1887=> "111001", 1888 => "111101", 1889 to 1892=> "111100", 1893 to 1896=> "111011", 1897 to 1900=> "111010", 
    1901 to 1903=> "111001", 1904 to 1906=> "111101", 1907 to 1910=> "111100", 1911 to 1914=> "111011", 1915 to 1919=> "111010", 
    1920 => "111110", 1921 to 1924=> "111101", 1925 to 1928=> "111100", 1929 to 1932=> "111011", 1933 to 1935=> "111010", 
    1936 to 1938=> "111110", 1939 to 1942=> "111101", 1943 to 1946=> "111100", 1947 to 1950=> "111011", 1951 => "111010", 
    1952 to 1953=> "111111", 1954 to 1956=> "111110", 1957 to 1960=> "111101", 1961 to 1964=> "111100", 1965 to 1967=> "111011", 
    1968 to 1971=> "111111", 1972 to 1974=> "111110", 1975 to 1978=> "111101", 1979 to 1982=> "111100", 1983 => "111011", 
    1984 to 1988=> "111111", 1989 to 1992=> "111110", 1993 to 1996=> "111101", 1997 to 1999=> "111100", 2000 to 2006=> "111111", 
    2007 to 2010=> "111110", 2011 to 2014=> "111101", 2015 => "111100", 2016 to 2024=> "111111", 2025 to 2028=> "111110", 
    2029 to 2031=> "111101", 2032 to 2042=> "111111", 2043 to 2046=> "111110", 2047 => "111101" );


signal q0_t0 : std_logic_vector(DWIDTH-1 downto 0);
signal q0_t1 : std_logic_vector(DWIDTH-1 downto 0);
signal q1_t0 : std_logic_vector(DWIDTH-1 downto 0);
signal q1_t1 : std_logic_vector(DWIDTH-1 downto 0);
begin 

q0 <= q0_t1;
q1 <= q1_t1;

p_IO_pipeline_reg : process (clk)  
begin
    if (clk'event and clk = '1') then
      if (ce0 = '1') then 
        q0_t1 <= q0_t0;
      end if;
      if (ce1 = '1') then 
        q1_t1 <= q1_t0;
      end if;
    end if;
end process;

memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0_t0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1_t0 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity VMRouterTop_L3PHIB_lut_1 is
    generic (
        DataWidth : INTEGER := 6;
        AddressRange : INTEGER := 2048;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of VMRouterTop_L3PHIB_lut_1 is
    component VMRouterTop_L3PHIB_lut_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    VMRouterTop_L3PHIB_lut_1_rom_U :  component VMRouterTop_L3PHIB_lut_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


